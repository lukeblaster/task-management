/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AppLayoutRouteImport } from './pages/app/layout'
import { Route as AuthRegisterRouteImport } from './pages/_auth/register'
import { Route as AuthLoginRouteImport } from './pages/_auth/login'
import { Route as AppUsersIndexRouteImport } from './pages/app/users/index'
import { Route as AppTasksIndexRouteImport } from './pages/app/tasks/index'
import { Route as AppTasksTaskIdIndexRouteImport } from './pages/app/tasks/$taskId/index'

const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/_auth/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppUsersIndexRoute = AppUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppTasksIndexRoute = AppTasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppTasksTaskIdIndexRoute = AppTasksTaskIdIndexRouteImport.update({
  id: '/tasks/$taskId/',
  path: '/tasks/$taskId/',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppLayoutRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/app/tasks': typeof AppTasksIndexRoute
  '/app/users': typeof AppUsersIndexRoute
  '/app/tasks/$taskId': typeof AppTasksTaskIdIndexRoute
}
export interface FileRoutesByTo {
  '/app': typeof AppLayoutRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/app/tasks': typeof AppTasksIndexRoute
  '/app/users': typeof AppUsersIndexRoute
  '/app/tasks/$taskId': typeof AppTasksTaskIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/app': typeof AppLayoutRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/app/tasks/': typeof AppTasksIndexRoute
  '/app/users/': typeof AppUsersIndexRoute
  '/app/tasks/$taskId/': typeof AppTasksTaskIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/login'
    | '/register'
    | '/app/tasks'
    | '/app/users'
    | '/app/tasks/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app'
    | '/login'
    | '/register'
    | '/app/tasks'
    | '/app/users'
    | '/app/tasks/$taskId'
  id:
    | '__root__'
    | '/app'
    | '/_auth/login'
    | '/_auth/register'
    | '/app/tasks/'
    | '/app/users/'
    | '/app/tasks/$taskId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/users/': {
      id: '/app/users/'
      path: '/users'
      fullPath: '/app/users'
      preLoaderRoute: typeof AppUsersIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/app/tasks/': {
      id: '/app/tasks/'
      path: '/tasks'
      fullPath: '/app/tasks'
      preLoaderRoute: typeof AppTasksIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/app/tasks/$taskId/': {
      id: '/app/tasks/$taskId/'
      path: '/tasks/$taskId'
      fullPath: '/app/tasks/$taskId'
      preLoaderRoute: typeof AppTasksTaskIdIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppTasksIndexRoute: typeof AppTasksIndexRoute
  AppUsersIndexRoute: typeof AppUsersIndexRoute
  AppTasksTaskIdIndexRoute: typeof AppTasksTaskIdIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppTasksIndexRoute: AppTasksIndexRoute,
  AppUsersIndexRoute: AppUsersIndexRoute,
  AppTasksTaskIdIndexRoute: AppTasksTaskIdIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
